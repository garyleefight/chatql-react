type User {
  id: ID!
  username: String!
  conversations(filter: ModelUserConversationFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelUserConversationConnection
  messages(filter: ModelMessageFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelMessageConnection
  createdAt: String
  updatedAt: String
}

type UserConversation {
  id: ID!
  user: User!
  userConversationUserId: ID
  conversation: Conversation!
  userConversationConversationId: ID!
  createdAt: String
  updatedAt: String
}

type Conversation {
  id: ID!
  messages(filter: ModelMessageFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelMessageConnection
  userConversations(filter: ModelUserConversationFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelUserConversationConnection
  name: String!
  members: [String!]!
  createdAt: String
  updatedAt: String
}

type Message {
  author: User
  authorId: String
  content: String!
  conversation: Conversation!
  messageConversationId: ID!
  id: ID!
  isSent: Boolean
  recipient: User
  sender: String
  createdAt: String
  updatedAt: String
}

type Subscription {
  onCreateUserConversation(userConversationUserId: ID!): UserConversation @aws_subscribe(mutations: ["createUserConversation"])
  onCreateMessage(messageConversationId: ID!): Message @aws_subscribe(mutations: ["createMessage"])
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateConversation: Conversation @aws_subscribe(mutations: ["createConversation"])
  onUpdateConversation: Conversation @aws_subscribe(mutations: ["updateConversation"])
  onDeleteConversation: Conversation @aws_subscribe(mutations: ["deleteConversation"])
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelUserFilterInput {
  id: ModelIDFilterInput
  username: ModelStringFilterInput
  createdAt: ModelStringFilterInput
  updatedAt: ModelStringFilterInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

type Query {
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getConversation(id: ID!): Conversation
  listConversations(filter: ModelConversationFilterInput, limit: Int, nextToken: String): ModelConversationConnection
  getMessage(id: ID!): Message
  listMessages(filter: ModelMessageFilterInput, limit: Int, nextToken: String): ModelMessageConnection
}

input CreateUserInput {
  id: ID
  username: String!
  createdAt: String
  updatedAt: String
}

input UpdateUserInput {
  id: ID!
  username: String
  createdAt: String
  updatedAt: String
}

input DeleteUserInput {
  id: ID
}

type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(input: DeleteUserInput!): User
  createUserConversation(input: CreateUserConversationInput!): UserConversation
  updateUserConversation(input: UpdateUserConversationInput!): UserConversation
  deleteUserConversation(input: DeleteUserConversationInput!): UserConversation
  createConversation(input: CreateConversationInput!): Conversation
  updateConversation(input: UpdateConversationInput!): Conversation
  deleteConversation(input: DeleteConversationInput!): Conversation
  createMessage(input: CreateMessageInput!): Message
  updateMessage(input: UpdateMessageInput!): Message
  deleteMessage(input: DeleteMessageInput!): Message
}

input CreateUserConversationInput {
  id: ID
  userConversationUserId: ID
  userConversationConversationId: ID!
  createdAt: String
  updatedAt: String
}

input UpdateUserConversationInput {
  id: ID!
  userConversationUserId: ID
  userConversationConversationId: ID
  createdAt: String
  updatedAt: String
}

input DeleteUserConversationInput {
  id: ID
}

type ModelConversationConnection {
  items: [Conversation]
  nextToken: String
}

input ModelConversationFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  members: ModelStringFilterInput
  createdAt: ModelStringFilterInput
  updatedAt: ModelStringFilterInput
  and: [ModelConversationFilterInput]
  or: [ModelConversationFilterInput]
  not: ModelConversationFilterInput
}

input CreateConversationInput {
  id: ID
  name: String!
  members: [String!]!
  createdAt: String
  updatedAt: String
}

input UpdateConversationInput {
  id: ID!
  name: String
  members: [String!]
  createdAt: String
  updatedAt: String
}

input DeleteConversationInput {
  id: ID
}

type ModelMessageConnection {
  items: [Message]
  nextToken: String
}

input ModelMessageFilterInput {
  authorId: ModelStringFilterInput
  content: ModelStringFilterInput
  messageConversationId: ModelIDFilterInput
  id: ModelIDFilterInput
  isSent: ModelBooleanFilterInput
  sender: ModelStringFilterInput
  createdAt: ModelStringFilterInput
  updatedAt: ModelStringFilterInput
  and: [ModelMessageFilterInput]
  or: [ModelMessageFilterInput]
  not: ModelMessageFilterInput
}

input CreateMessageInput {
  authorId: String
  content: String!
  messageConversationId: ID!
  id: ID
  isSent: Boolean
  sender: String
  createdAt: String
  updatedAt: String
}

input UpdateMessageInput {
  authorId: String
  content: String
  messageConversationId: ID
  id: ID!
  isSent: Boolean
  sender: String
  createdAt: String
  updatedAt: String
}

input DeleteMessageInput {
  id: ID
}

type ModelUserConversationConnection {
  items: [UserConversation]
  nextToken: String
}

input ModelUserConversationFilterInput {
  id: ModelIDFilterInput
  userConversationUserId: ModelIDFilterInput
  userConversationConversationId: ModelIDFilterInput
  createdAt: ModelStringFilterInput
  updatedAt: ModelStringFilterInput
  and: [ModelUserConversationFilterInput]
  or: [ModelUserConversationFilterInput]
  not: ModelUserConversationFilterInput
}
